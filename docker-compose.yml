services:
    account-service:
        build: ./account-service
        container_name: account-service
        env_file: .env
        ports:
            - "${ACCOUNT_SERVICE_PORT}:${ACCOUNT_SERVICE_PORT}"
        depends_on:
            - kafka
            - discovery-service
            - db-account-service
        networks:
            - my-network
    db-account-service:
        image: mysql:8.0
        environment:
            MYSQL_ROOT_PASSWORD: 1234
            MYSQL_DATABASE: account_db
            MYSQL_USER: bia
            MYSQL_PASSWORD: 1234
        ports:
            - "3307:3306"
        networks:
            - my-network
        volumes:
            - mysql_data_account:/var/lib/mysql
    transaction-service:
        build: ./transaction-service
        container_name: transaction-service
        env_file: .env
        ports:
            - "${TRANSACTION_SERVICE_PORT}:${TRANSACTION_SERVICE_PORT}"
        depends_on:
            - kafka
            - discovery-service
        networks:
            - my-network
    db-transaction-service:
        image: mysql:8.0
        environment:
            MYSQL_ROOT_PASSWORD: 1234
            MYSQL_DATABASE: transaction_db
            MYSQL_USER: bia
            MYSQL_PASSWORD: 1234
        ports:
            - "3308:3306"
        networks:
            - my-network
        volumes:
            - mysql_data_transaction:/var/lib/mysql
    notification-service:
        build: ./notification-service
        container_name: notification-service
        env_file: .env
        ports:
            - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_PORT}"
        depends_on:
            - kafka
            - discovery-service
        networks:
            - my-network
    db-notification-service:
        image: mysql:8.0
        environment:
            MYSQL_ROOT_PASSWORD: 1234
            MYSQL_DATABASE: notification_db
            MYSQL_USER: bia
            MYSQL_PASSWORD: 1234
        ports:
            - "3309:3306"
        networks:
            - my-network
        volumes:
            - mysql_data_notification:/var/lib/mysql
    discovery-service:
        build: ./discovery-service
        container_name: discovery-service
        env_file: .env
        ports:
            - "${DISCOVERY_SERVICE_PORT}:${DISCOVERY_SERVICE_PORT}"
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:${DISCOVERY_SERVICE_PORT}/actuator/health" ]
            interval: 30s
            timeout: 10s
            retries: 5
        depends_on:
            - kafka
        networks:
            - my-network
    gateway-service:
        build: ./gateway-service
        container_name: gateway-service
        env_file: .env
        ports:
            - "${GATEWAY_SERVICE_PORT}:${GATEWAY_SERVICE_PORT}"
        depends_on:
            - kafka
            - discovery-service
        networks:
            - my-network
    kafka:
        image: confluentinc/cp-kafka:latest
        ports:
            - "${KAFKA_PORT}:${KAFKA_PORT}"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT},PLAINTEXT_HOST://localhost:${KAFKA_PORT}
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${KAFKA_PORT},PLAINTEXT_HOST://0.0.0.0:29092
        depends_on:
            - zookeeper
        networks:
            - my-network
    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        ports:
            - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
        environment:
            ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
            ZOOKEEPER_TICK_TIME: 2000
        networks:
            - my-network
volumes:
    mysql_data_account:
    mysql_data_transaction:
    mysql_data_notification:

networks:
    my-network:
        driver: bridge